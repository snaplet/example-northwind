generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id   Int        @id(map: "pk_categories")
  category_name String     
  description   String?
  picture       Bytes?
  products      products[]
}

model customer_customer_demo {
  customer_id           String                
  customer_type_id      String                
  customer_demographics customer_demographics @relation(fields: [customer_type_id], references: [customer_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_customer_demo_customer_demographics")
  customers             customers             @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_customer_demo_customers")

  @@id([customer_id, customer_type_id], map: "pk_customer_customer_demo")
}

model customer_demographics {
  customer_type_id       String                   @id(map: "pk_customer_demographics")
  customer_desc          String?
  customer_customer_demo customer_customer_demo[]
}

model customers {
  customer_id            String                   @id(map: "pk_customers")
  company_name           String                   
  contact_name           String?                  
  contact_title          String?                  
  address                String?                  
  city                   String?                  
  region                 String?                  
  postal_code            String?                  
  country                String?                  
  phone                  String?
  customer_customer_demo customer_customer_demo[]
  orders                 orders[]
}

model employee_territories {
  employee_id  Int         
  territory_id String      
  employees    employees   @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_territories_employees")
  territories  territories @relation(fields: [territory_id], references: [territory_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_territories_territories")

  @@id([employee_id, territory_id], map: "pk_employee_territories")
}

model employees {
  employee_id          Int                    @id(map: "pk_employees")
  last_name            String                 
  first_name           String                 
  title                String?                
  title_of_courtesy    String?                
  birth_date           DateTime?              
  hire_date            DateTime?              
  address              String?                
  city                 String?                
  region               String?                
  postal_code          String?                
  country              String?                
  home_phone           String?                
  extension            String?                
  photo                Bytes?
  notes                String?
  reports_to           Int?                   
  photo_path           String?                
  employees            employees?             @relation("employeesToemployees", fields: [reports_to], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_employees_employees")
  employee_territories employee_territories[]
  other_employees      employees[]            @relation("employeesToemployees")
  orders               orders[]
}

model order_details {
  order_id   Int      
  product_id Int      
  unit_price Float    
  quantity   Int      
  discount   Float    
  orders     orders   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_details_orders")
  products   products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_details_products")

  @@id([order_id, product_id], map: "pk_order_details")
}

model orders {
  order_id         Int             @id(map: "pk_orders")
  customer_id      String?         
  employee_id      Int?            
  order_date       DateTime?       
  required_date    DateTime?       
  shipped_date     DateTime?       
  ship_via         Int?            
  freight          Float?          
  ship_name        String?         
  ship_address     String?         
  ship_city        String?         
  ship_region      String?         
  ship_postal_code String?         
  ship_country     String?         
  customers        customers?      @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_customers")
  employees        employees?      @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_employees")
  shippers         shippers?       @relation(fields: [ship_via], references: [shipper_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_shippers")
  order_details    order_details[]
}

model products {
  product_id        Int             @id(map: "pk_products")
  product_name      String          
  supplier_id       Int?            
  category_id       Int?            
  quantity_per_unit String?         
  unit_price        Float?          
  units_in_stock    Int?            
  units_on_order    Int?            
  reorder_level     Int?            
  discontinued      Int
  categories        categories?     @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_categories")
  suppliers         suppliers?      @relation(fields: [supplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_products_suppliers")
  order_details     order_details[]
}

model region {
  region_id          Int           @id(map: "pk_region")
  region_description String        
  territories        territories[]
}

model shippers {
  shipper_id   Int      @id(map: "pk_shippers")
  company_name String   
  phone        String?  
  orders       orders[]
}

model suppliers {
  supplier_id   Int        @id(map: "pk_suppliers")
  company_name  String     
  contact_name  String?    
  contact_title String?    
  address       String?    
  city          String?    
  region        String?    
  postal_code   String?    
  country       String?    
  phone         String?    
  fax           String?    
  homepage      String?
  products      products[]
}

model territories {
  territory_id          String                 @id(map: "pk_territories")
  territory_description String                 
  region_id             Int                    
  region                region                 @relation(fields: [region_id], references: [region_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_territories_region")
  employee_territories  employee_territories[]
}

model us_states {
  state_id     Int     @id(map: "pk_usstates")
  state_name   String? 
  state_abbr   String? 
  state_region String? 
}
